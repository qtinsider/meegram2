diff --git a/src/lottie/lottieparser.cpp b/src/lottie/lottieparser.cpp
index 83be17e..6616de1 100644
--- a/src/lottie/lottieparser.cpp
+++ b/src/lottie/lottieparser.cpp
@@ -997,9 +997,9 @@ model::Layer *LottieParserImpl::parseLayer()
         } else if (0 == strcmp(key, "tm")) {  // time remapping
             parseProperty(layer->extra()->mTimeRemap);
         } else if (0 == strcmp(key, "ip")) {
-            layer->mInFrame = std::lround(GetDouble());
+            layer->mInFrame = ::lround(GetDouble());
         } else if (0 == strcmp(key, "op")) {
-            layer->mOutFrame = std::lround(GetDouble());
+            layer->mOutFrame = ::lround(GetDouble());
         } else if (0 == strcmp(key, "st")) {
             layer->mStartFrame = GetDouble();
         } else if (0 == strcmp(key, "bm")) {
diff --git a/src/vector/pixman/CMakeLists.txt b/src/vector/pixman/CMakeLists.txt
index d904ca8..742ba11 100644
--- a/src/vector/pixman/CMakeLists.txt
+++ b/src/vector/pixman/CMakeLists.txt
@@ -1,11 +1,11 @@
 
-IF("${ARCH}" STREQUAL "arm")
+IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
 SET(CMAKE_ASM_FLAGS "${CFLAGS} -x assembler-with-cpp")
 target_sources(rlottie
     PRIVATE
         "${CMAKE_CURRENT_LIST_DIR}/pixman-arm-neon-asm.S"
     )
-ENDIF("${ARCH}" STREQUAL "arm")
+ENDIF()
 
 target_include_directories(rlottie
     PRIVATE
diff --git a/src/vector/vmatrix.cpp b/src/vector/vmatrix.cpp
index 7efed61..520377f 100644
--- a/src/vector/vmatrix.cpp
+++ b/src/vector/vmatrix.cpp
@@ -597,13 +597,13 @@ VRect VMatrix::map(const VRect &rect) const
 {
     VMatrix::MatrixType t = type();
     if (t <= MatrixType::Translate)
-        return rect.translated(std::lround(mtx), std::lround(mty));
+        return rect.translated(::lround(mtx), ::lround(mty));
 
     if (t <= MatrixType::Scale) {
-        int x = std::lround(m11 * rect.x() + mtx);
-        int y = std::lround(m22 * rect.y() + mty);
-        int w = std::lround(m11 * rect.width());
-        int h = std::lround(m22 * rect.height());
+        int x = ::lround(m11 * rect.x() + mtx);
+        int y = ::lround(m22 * rect.y() + mty);
+        int w = ::lround(m11 * rect.width());
+        int h = ::lround(m22 * rect.height());
         if (w < 0) {
             w = -w;
             x -= w;
@@ -636,9 +636,9 @@ VRect VMatrix::map(const VRect &rect) const
         ymin = vMin(ymin, y);
         xmax = vMax(xmax, x);
         ymax = vMax(ymax, y);
-        return VRect(std::lround(xmin), std::lround(ymin),
-                     std::lround(xmax) - std::lround(xmin),
-                     std::lround(ymax) - std::lround(ymin));
+        return VRect(::lround(xmin), ::lround(ymin),
+                     ::lround(xmax) - ::lround(xmin),
+                     ::lround(ymax) - ::lround(ymin));
     } else {
         // Not supported
         assert(0);
